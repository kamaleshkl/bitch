procfile
+working: python loopself.py ðŸš«

appuselfbot.py
   if not os.path.isfile('settings/moderation.json'):
         with open('settings/moderation.json', 'w', encoding="utf8") as m:
             mod = {}
             json.dump(mod, m, indent=4)
     if not os.path.isfile('settings/todo.json'):
         with open('settings/todo.json', 'w', encoding="utf8") as t:
             todo = {}
             json.dump(todo, t, indent=4)
 
     if not os.path.exists('avatars'):
         os.makedirs('avatars')
     if not os.path.isfile('settings/avatars.json'):
         with open('settings/avatars.json', 'w', encoding="utf8") as avis:
             json.dump({'password': '', 'interval': '0', 'type': 'random'}, avis, indent=4)
     with open('settings/avatars.json', 'r', encoding="utf8") as g:
         avatars = json.load(g)
     bot.avatar_interval = avatars['interval']
     if os.listdir('avatars') and avatars['interval'] != '0':
         all_avis = os.listdir('avatars')
         all_avis.sort()
         avi = random.choice(all_avis)
         bot.avatar = avi
     if not os.path.isfile('settings/optional_config.json'):
         conf = load_config()
         o_conf = {'google_api_key': conf['google_api_key'], 'custom_search_engine': conf['custom_search_engine'], 'mal_username': conf['mal_username'], 'mal_password': conf['mal_password']}
         with open('settings/optional_config.json', 'w', encoding="utf8") as oc:
             json.dump(o_conf, oc, indent=4)
     with open('settings/optional_config.json', 'r+', encoding="utf8") as fp:
         opt = json.load(fp)
         if 'embed_color' not in opt:
             opt['embed_color'] = ''
         if 'quoteembed_color' not in opt:
             opt['quoteembed_color'] = 'bc0b0b'
         if 'customcmd_color' not in opt:
             opt['customcmd_color'] = '27007A'
         if 'rich_embed' not in opt:
             opt['rich_embed'] = 'on'
         if 'default_status' not in opt:
             opt['default_status'] = 'idle'
         if 'ascii_font' not in opt:
             opt['ascii_font'] = 'big'
         if 'timezone' not in opt:
             opt['timezone'] = ''
+        if '24hours' not in opt:
+            opt['24hours'] = 'true'
         if 'password' not in opt:
             opt['password'] = ''
         if avatars['password'] != '' and opt['password'] == '':
             opt['password'] = avatars['password']
         bot.default_status = opt['default_status']
         fp.seek(0)
         fp.truncate()
         json.dump(opt, fp, indent=4)
 
     if not os.path.isfile('settings/github.json'):
         with open('settings/github.json', 'w', encoding="utf8") as fp:
             git = {}
             json.dump(git, fp, indent=4)
     with open('settings/github.json', 'r+', encoding="utf8") as fp:
         opt = json.load(fp)
         if 'username' not in opt:
             opt['username'] = ''
         if 'password' not in opt:
             opt['password'] = ''
         if 'reponame' not in opt:
             opt['reponame'] = ''
         fp.seek(0)
         fp.truncate()
           json.dump(opt, fp, indent=4)
 
     notif = load_notify_config()
     if notif['type'] == 'dm':
         if os.path.exists('notifier.txt'):
             pid = open('notifier.txt', 'r', encoding="utf8").read()
             try:
                 p = psutil.Process(int(pid))
                 p.kill()
             except:
                 pass
             os.remove('notifier.txt')
         bot.subpro = subprocess.Popen([sys.executable, 'cogs/utils/notify.py'])
         with open('notifier.txt', 'w', encoding="utf8") as fp:
             fp.write(str(bot.subpro.pid))
 
  json.dump(opt, fp, indent=4)
 
     notif = load_notify_config()
     if notif['type'] == 'dm':
         if os.path.exists('notifier.txt'):
             pid = open('notifier.txt', 'r', encoding="utf8").read()
             try:
                 p = psutil.Process(int(pid))
                 p.kill()
             except:
                 pass
             os.remove('notifier.txt')
         bot.subpro = subprocess.Popen([sys.executable, 'cogs/utils/notify.py'])
         with open('notifier.txt', 'w', encoding="utf8") as fp:
             fp.write(str(bot.subpro.pid))
 
 
 @bot.event
 async def on_command_error(ctx, error):
     if isinstance(error, commands.errors.CommandNotFound):
         pass
     elif isinstance(error, commands.errors.CheckFailure):
         await ctx.send(bot.bot_prefix + "You don't have permissions to use that command.")
     elif isinstance(error, commands.errors.MissingRequiredArgument):
         formatter = commands.formatter.HelpFormatter()
         help = await formatter.format_help_for(ctx, ctx.command)
         await ctx.send(bot.bot_prefix + "You are missing required arguments.\n" + help[0])
     else:
         if _silent:
             await ctx.send(bot.bot_prefix + "An error occurred with the `{}` command.".format(ctx.command.name))
         else:
             await ctx.send(bot.bot_prefix + "An error occurred with the `{}` command. Check the console for details.".format(ctx.command.name))
             print("Ignoring exception in command {}".format(ctx.command.name))
             trace = traceback.format_exception(type(error), error, error.__traceback__)
             print("".join(trace))
 
 
 @bot.command(pass_context=True, aliases=['reboot'])
 async def restart(ctx):
     """Restarts the bot."""
     def check(msg):
         if msg:
             return (msg.content.lower().strip() == 'y' or msg.content.lower().strip() == 'n') and msg.author == bot.user
         else:
             return False
 
     latest = update_bot(True)
     if latest:
         await ctx.send(bot.bot_prefix + 'There is an update available for the bot. Download and apply the update on restart? (y/n)')
         reply = await bot.wait_for("message", check=check)
         with open('restart.txt', 'w', encoding="utf8") as re:
             re.write(str(ctx.message.channel.id))
         if not reply or reply.content.lower().strip() == 'n':
             print('Restarting...')
             await ctx.send(bot.bot_prefix + 'Restarting...')
         else:
             try:
                 await ctx.send(content=None, embed=latest)
             except:
                 pass
             with open('quit.txt', 'w', encoding="utf8") as q:
                 q.write('update')
             print('Downloading update and restarting...')
             await ctx.send(bot.bot_prefix + 'Downloading update and restarting (check your console to see the progress)...')
 
     else:
         print('Restarting...')
         with open('restart.txt', 'w', encoding="utf8") as re:
             re.write(str(ctx.message.channel.id))
         await ctx.send(bot.bot_prefix + 'Restarting...')
 
     if bot.subpro:
         bot.subpro.kill()
     os._exit(0)
 
 
 @bot.command(pass_context=True, aliases=['upgrade'])
 async def update(ctx, msg: str = None):
     """Update the bot if there is an update available."""
     if msg:
         latest = update_bot(False) if msg == 'show' else update_bot(True)
     else:
         latest = update_bot(True)
     if latest:
         if not msg == 'show':
             if embed_perms(ctx.message):
                 try:
                     await ctx.send(content=None, embed=latest)
                 except:
                     pass
             await ctx.send(bot.bot_prefix + 'There is an update available. Downloading update and restarting (check your console to see the progress)...')
         else:
             try:
                 await ctx.send(content=None, embed=latest)
             except:
                 pass
             return
         with open('quit.txt', 'w', encoding="utf8") as q:
             q.write('update')
         with open('restart.txt', 'w', encoding="utf8") as re:
             re.write(str(ctx.message.channel.id))
         if bot.subpro:
             bot.subpro.kill()
         os._exit(0)
     else:
         await ctx.send(bot.bot_prefix + 'The bot is up to date.')
 
   json.dump(opt, fp, indent=4)
 
     notif = load_notify_config()
     if notif['type'] == 'dm':
         if os.path.exists('notifier.txt'):
             pid = open('notifier.txt', 'r', encoding="utf8").read()
             try:
                 p = psutil.Process(int(pid))
                 p.kill()
             except:
                 pass
             os.remove('notifier.txt')
         bot.subpro = subprocess.Popen([sys.executable, 'cogs/utils/notify.py'])
         with open('notifier.txt', 'w', encoding="utf8") as fp:
             fp.write(str(bot.subpro.pid))
 
 
 @bot.event
 async def on_command_error(ctx, error):
     if isinstance(error, commands.errors.CommandNotFound):
         pass
     elif isinstance(error, commands.errors.CheckFailure):
         await ctx.send(bot.bot_prefix + "You don't have permissions to use that command.")
     elif isinstance(error, commands.errors.MissingRequiredArgument):
         formatter = commands.formatter.HelpFormatter()
         help = await formatter.format_help_for(ctx, ctx.command)
         await ctx.send(bot.bot_prefix + "You are missing required arguments.\n" + help[0])
     else:
         if _silent:
             await ctx.send(bot.bot_prefix + "An error occurred with the `{}` command.".format(ctx.command.name))
         else:
             await ctx.send(bot.bot_prefix + "An error occurred with the `{}` command. Check the console for details.".format(ctx.command.name))
             print("Ignoring exception in command {}".format(ctx.command.name))
             trace = traceback.format_exception(type(error), error, error.__traceback__)
             print("".join(trace))
 
 
 @bot.command(pass_context=True, aliases=['reboot'])
 async def restart(ctx):
     """Restarts the bot."""
     def check(msg):
         if msg:
             return (msg.content.lower().strip() == 'y' or msg.content.lower().strip() == 'n') and msg.author == bot.user
         else:
             return False
 
     latest = update_bot(True)
     if latest:
         await ctx.send(bot.bot_prefix + 'There is an update available for the bot. Download and apply the update on restart? (y/n)')
         reply = await bot.wait_for("message", check=check)
         with open('restart.txt', 'w', encoding="utf8") as re:
             re.write(str(ctx.message.channel.id))
         if not reply or reply.content.lower().strip() == 'n':
             print('Restarting...')
             await ctx.send(bot.bot_prefix + 'Restarting...')
         else:
             try:
                 await ctx.send(content=None, embed=latest)
             except:
                 pass
             with open('quit.txt', 'w', encoding="utf8") as q:
                 q.write('update')
             print('Downloading update and restarting...')
             await ctx.send(bot.bot_prefix + 'Downloading update and restarting (check your console to see the progress)...')
 
     else:
         print('Restarting...')
         with open('restart.txt', 'w', encoding="utf8") as re:
             re.write(str(ctx.message.channel.id))
         await ctx.send(bot.bot_prefix + 'Restarting...')
 
     if bot.subpro:
         bot.subpro.kill()
     os._exit(0)
 
 
 @bot.command(pass_context=True, aliases=['upgrade'])
 async def update(ctx, msg: str = None):
     """Update the bot if there is an update available."""
     if msg:
         latest = update_bot(False) if msg == 'show' else update_bot(True)
     else:
         latest = update_bot(True)
     if latest:
         if not msg == 'show':
             if embed_perms(ctx.message):
                 try:
                     await ctx.send(content=None, embed=latest)
                 except:
                     pass
             await ctx.send(bot.bot_prefix + 'There is an update available. Downloading update and restarting (check your console to see the progress)...')
         else:
             try:
                 await ctx.send(content=None, embed=latest)
             except:
                 pass
             return
         with open('quit.txt', 'w', encoding="utf8") as q:
             q.write('update')
         with open('restart.txt', 'w', encoding="utf8") as re:
             re.write(str(ctx.message.channel.id))
         if bot.subpro:
             bot.subpro.kill()
         os._exit(0)
     else:
         await ctx.send(bot.bot_prefix + 'The bot is up to date.')
         cogs/utility.py
         import datetime
 import asyncio
 import strawpy
 import pytz
 import re
 import requests
 import json
 import discord
 import os
 import glob
 import git
 from PIL import Image
 from PythonGists import PythonGists
 from discord.ext import commands
 from cogs.utils.checks import *
 from bs4 import BeautifulSoup
 from urllib import parse
 from urllib.request import Request, urlopen
 import math
 from math import sqrt
 from cogs.utils.dataIO import dataIO
 from cogs.utils.config import write_config_value
 
 '''Module for fun/meme commands commands'''
 
 
 class Utility:
     def __init__(self, bot):
         self.bot = bot
 
     @staticmethod
     def get_datetime():
         a = None
         tzerror = False
         opt = dataIO.load_json('settings/optional_config.json')
         try:
             if opt['timezone']:
                 tz = opt['timezone']
                 a = pytz.timezone(tz)
         except IndexError:
             # Timezone entry missing in configuration file
             pass
         except pytz.exceptions.UnknownTimeZoneError:
             tzerror = True
         return datetime.datetime.now(a), tzerror
 
     @commands.command(pass_context=True)
     async def now(self, ctx):
         """Date time module."""
         dandt, tzerror = self.get_datetime()
         if embed_perms(ctx.message):
             em = discord.Embed(color=discord.Color.blue())
             em.add_field(name=u'\u23F0 Time', value="{:%H:%M:%S}".format(dandt), inline=False)
             em.add_field(name=u'\U0001F4C5 Date', value="{:%d %B %Y}".format(dandt), inline=False)
             if tzerror:
                 em.add_field(name=u'\u26A0 Warning', value="Invalid timezone specified, system timezone was used instead.", inline=False)
 
             await ctx.send(content=None, embed=em)
         else:
             msg = '**Local Date and Time:** ```{:Time: %H:%M:%S\nDate: %Y-%m-%d```}'.format(dandt)
             await ctx.send(self.bot.bot_prefix + msg)
         await ctx.message.delete()
 
     @commands.command(pass_context=True)
     async def time(self, ctx):
         """Show current time"""
+        opt = dataIO.load_json('settings/optional_config.json')
+        thebool = True
+        try:
+            if opt['24hours'] == "true":
+                thebool = True
+            else:
+                thebool = False
+        except IndexError:
+            # No 24 hour bool given so default to true
+            pass
         await ctx.message.delete()
         dandt, tzerror = self.get_datetime()
-        msg = '{:Time: `%H:%M:%S`}'.format(dandt)
+        if thebool:
+            returnstring = '{:Time: `%H:%M:%S`}'.format(dandt)
+        else:
+            returnstring = '{:Time: `%I:%M:%S %p`}'.format(dandt)
+        msg = returnstring
         await ctx.send(self.bot.bot_prefix + msg)
 
     @commands.command(pass_context=True)
@@ -82,6 +96,22 @@ def get_datetime():
         """Write text in code format."""
         await ctx.message.delete()
         await ctx.send("```" + msg.replace("`", "") + "```")
+    
+    @commands.command(pass_context=True)
+    async def toggletime(self, ctx):
+        """Toggle between 24 hours time and 12 hours time"""
+        opt = dataIO.load_json('settings/optional_config.json')
+        try:
+            if opt['24hours'] == "true":
+                write_config_value("optional_config", "24hours", "false")
+                await ctx.send(self.bot.bot_prefix + "Set time to `12 hour` clock")
+            else:
+                write_config_value("optional_config", "24hours", "true")
+                await ctx.send(self.bot.bot_prefix + "Set time to `24 hour` clock")
+        except:
+            # Nothing was set, so changing the default to 12hrs
+            write_config_value("optional_config", "24hours", "false")
+            await ctx.send(self.bot.bot_prefix + "Set time to `12 hour` clock")
 
     @commands.command(pass_context=True)
     async def timezone(self, ctx, *, msg):
         """Set preferred timezone. Use the timezonelist for a full list of timezones."""
         write_config_value("optional_config", "timezone", msg)
         await ctx.send(self.bot.bot_prefix + 'Preferred timezone has been set.')
 
     @commands.command(pass_context=True)
     async def timezonelist(self, ctx):
         """List all available timezones for the timezone command."""
         await ctx.message.delete()
         embed = discord.Embed()
         embed.description = "[List of valid timezones](https://gist.github.com/anonymous/67129932414d0b82f58758a699a5a0ef)"
         await ctx.send("", embed=embed)
 
     @commands.command(pass_context=True)
     async def cmdprefix(self, ctx, *, msg):
         """Set your command prefix for normal commands. Requires a reboot."""
         write_config_value("config", "cmd_prefix", msg)
         await ctx.send(self.bot.bot_prefix + 'Prefix changed. Use `restart` to reboot the bot for the updated prefix.')
 
     @commands.command(pass_context=True)
     async def customcmdprefix(self, ctx, *, msg):
         """Set your command prefix for custom commands."""
         write_config_value("config", "customcmd_prefix", msg)
         self.bot.customcmd_prefix = msg
         await ctx.send(self.bot.bot_prefix + 'Prefix changed.')
 
     @commands.command(pass_context=True)
     async def botprefix(self, ctx, *, msg):
         """Set bot prefix"""
         write_config_value("config", "bot_identifier", msg)
         self.bot.bot_prefix = msg + ' '
         await ctx.send(self.bot.bot_prefix + 'Prefix changed.')
 
     @commands.command(pass_context=True)
     async def calc(self, ctx, *, msg):
         """Simple calculator. Ex: >calc 2+2"""
         equation = msg.strip().replace('^', '**').replace('x', '*')
         try:
             if '=' in equation:
                 left = eval(equation.split('=')[0], {"__builtins__": None}, {"sqrt": sqrt})
                 right = eval(equation.split('=')[1], {"__builtins__": None}, {"sqrt": sqrt})
                 answer = str(left == right)
             else:
                 answer = str(eval(equation, {"__builtins__": None}, {"sqrt": sqrt}))
         except TypeError:
             return await ctx.send(self.bot.bot_prefix + "Invalid calculation query.")
         if embed_perms(ctx.message):
             em = discord.Embed(color=0xD3D3D3, title='Calculator')
             em.add_field(name='Input:', value=msg.replace('**', '^').replace('x', '*'), inline=False)
             em.add_field(name='Output:', value=answer, inline=False)
             await ctx.send(content=None, embed=em)
             await ctx.message.delete()
         else:
             await ctx.send(self.bot.bot_prefix + answer)
 
 
     @commands.command(aliases=['sd'],pass_context=True)
     async def selfdestruct(self, ctx, *, amount: str = None):
         """Builds a self-destructing message. Ex: >sd 5"""
         async for message in ctx.message.channel.history():
             if message.id == ctx.message.id:
                 continue
             if message.author == ctx.message.author:
                 killmsg = message
                 break
         timer = int(amount.strip())
         # Animated countdown because screw rate limit amirite
         destroy = ctx.message
         await ctx.message.edit(content=self.bot.bot_prefix + 'The above message will self-destruct in:')
         msg = await ctx.send('``%s  |``' % timer)
         for i in range(0, timer, 4):
             if timer - 1 - i == 0:
                 await destroy.delete()
                 await msg.edit(content='``0``')
                 break
             else:
                 await msg.edit(content='``%s  |``' % int(timer - 1 - i))
                 await asyncio.sleep(1)
             if timer - 1 - i != 0:
                 if timer - 2 - i == 0:
                     await destroy.delete()
                     await msg.edit(content='``0``')
                     break
                 else:
                     await msg.edit(content='``%s  /``' % int(timer - 2 - i))
                     await asyncio.sleep(1)
             if timer - 2 - i != 0:
                 if timer - 3 - i == 0:
                     await destroy.delete()
                     await msg.edit(content='``0``')
                     break
                 else:
                     await msg.edit(content='``%s  -``' % int(timer - 3 - i))
                     await asyncio.sleep(1)
             if timer - 3 - i != 0:
                 if timer - 4 - i == 0:
                     await destroy.delete()
                     await msg.edit(content='``0``')
                     break
                 else:
                     await msg.edit(content='``%s  \ ``' % int(timer - 4 - i))
                     await asyncio.sleep(1)
         await msg.edit(content=':bomb:')
         await asyncio.sleep(.5)
         await msg.edit(content=':fire:')
         await killmsg.edit(content=':fire:')
         await asyncio.sleep(.5)
         await msg.delete()
         await killmsg.delete()
 
     @commands.command(aliases=['d'], pass_context=True)
     async def delete(self, ctx, txt=None, channel=None):
         """Deletes the last message sent or n messages sent. Ex: >d 5"""
         if txt: # If number of seconds/messages are specified
             await ctx.message.delete()
             deleted = 0
             if txt == "all":
                 limit = 1000
             else:
                 txt = int(txt)
                 limit = 200
    settings/optional_config.json.sample
       "quoteembed_color": "auto",
     "embed_color": "",
     "timezone": "",
+    "24hours": "true",
 	"password": ""
 } 
